{
  "address": "0xA3f648BB38c912093e318d2dfb22a40F7Ae6Fa16",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityMinted",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityBurned",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_NUMERATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidityMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalLiquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getSwapAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidityAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sharePercentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidityAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenA",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenB",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e69fc98c9a45e6b462656341c10c60d15ece63a2c87552d677ef2c30438af6a",
  "receipt": {
    "to": null,
    "from": "0x925c164A113D7fbF28D31f4838A39c30Ee881c9e",
    "contractAddress": "0xA3f648BB38c912093e318d2dfb22a40F7Ae6Fa16",
    "transactionIndex": 1,
    "gasUsed": "991103",
    "logsBloom": "0x
    "blockHash": "0xda5564b967bc554849efb39cbe378e7309842f535f446e63e17dfde71f020fd2",
    "transactionHash": "0x3e69fc98c9a45e6b462656341c10c60d15ece63a2c87552d677ef2c30438af6a",
    "logs": [],
    "blockNumber": 28089401,
    "cumulativeGasUsed": "1037211",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC653d094CD7f4bbfd262658904AAeb2b6Dea07d4",
    "0x5640B1fD3337147aA1A8684B8e3FF7ea4Ad08276"
  ],
  "numDeployments": 1,
  "solcInputHash": "9a483ec2a0183b1a48a0f6eec092bee3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityMinted\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityBurned\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Supports a single token pair with add/remove liquidity and swap functions\",\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256,uint256)\":{\"params\":{\"amountA\":\"Amount of token A to add\",\"amountB\":\"Amount of token B to add\"},\"returns\":{\"liquidityMinted\":\"Amount of liquidity shares minted\"}},\"constructor\":{\"params\":{\"_tokenA\":\"Address of first token\",\"_tokenB\":\"Address of second token\"}},\"getReserves()\":{\"returns\":{\"_reserveA\":\"Reserve of token A\",\"_reserveB\":\"Reserve of token B\",\"_totalLiquidity\":\"Total liquidity shares\"}},\"getSwapAmount(address,uint256)\":{\"params\":{\"amountIn\":\"Amount of token to swap in\",\"tokenIn\":\"Address of token to swap in\"},\"returns\":{\"amountOut\":\"Estimated amount of token to receive\"}},\"getUserLiquidity(address)\":{\"params\":{\"user\":\"Address to check\"},\"returns\":{\"liquidityAmount\":\"User's liquidity shares\",\"sharePercentage\":\"User's percentage of pool (in basis points, e.g., 1000 = 10%)\"}},\"removeLiquidity(uint256)\":{\"params\":{\"liquidityAmount\":\"Amount of liquidity shares to burn\"},\"returns\":{\"amountA\":\"Amount of token A returned\",\"amountB\":\"Amount of token B returned\"}},\"swap(address,uint256)\":{\"params\":{\"amountIn\":\"Amount of token to swap in\",\"tokenIn\":\"Address of token to swap in\"},\"returns\":{\"amountOut\":\"Amount of token received\"}}},\"title\":\"SimpleDEX\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256,uint256)\":{\"notice\":\"Add liquidity to the pool\"},\"constructor\":{\"notice\":\"Constructor sets the token pair\"},\"getReserves()\":{\"notice\":\"Get current pool state\"},\"getSwapAmount(address,uint256)\":{\"notice\":\"Calculate swap output amount (view function)\"},\"getUserLiquidity(address)\":{\"notice\":\"Get user's liquidity position\"},\"removeLiquidity(uint256)\":{\"notice\":\"Remove liquidity from the pool\"},\"swap(address,uint256)\":{\"notice\":\"Swap one token for another\"}},\"notice\":\"A simplified decentralized exchange using constant product AMM (x * y = k)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleDEX.sol\":\"SimpleDEX\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/SimpleDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title SimpleDEX\\n * @notice A simplified decentralized exchange using constant product AMM (x * y = k)\\n * @dev Supports a single token pair with add/remove liquidity and swap functions\\n */\\ncontract SimpleDEX is ReentrancyGuard {\\n\\t// Token addresses\\n\\tIERC20 public immutable tokenA;\\n\\tIERC20 public immutable tokenB;\\n\\n\\t// Pool reserves\\n\\tuint256 public reserveA;\\n\\tuint256 public reserveB;\\n\\n\\t// Liquidity tracking\\n\\tuint256 public totalLiquidity;\\n\\tmapping(address => uint256) public liquidity;\\n\\n\\t// Fee (0.3% = 3/1000)\\n\\tuint256 public constant FEE_NUMERATOR = 3;\\n\\tuint256 public constant FEE_DENOMINATOR = 1000;\\n\\n\\t// Events\\n\\tevent LiquidityAdded(\\n\\t\\taddress indexed provider,\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 amountB,\\n\\t\\tuint256 liquidityMinted\\n\\t);\\n\\tevent LiquidityRemoved(\\n\\t\\taddress indexed provider,\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 amountB,\\n\\t\\tuint256 liquidityBurned\\n\\t);\\n\\tevent Swap(\\n\\t\\taddress indexed user,\\n\\t\\taddress indexed tokenIn,\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOut\\n\\t);\\n\\n\\t/**\\n\\t * @notice Constructor sets the token pair\\n\\t * @param _tokenA Address of first token\\n\\t * @param _tokenB Address of second token\\n\\t */\\n\\tconstructor(address _tokenA, address _tokenB) {\\n\\t\\trequire(\\n\\t\\t\\t_tokenA != address(0) && _tokenB != address(0),\\n\\t\\t\\t\\\"Invalid token address\\\"\\n\\t\\t);\\n\\t\\trequire(_tokenA != _tokenB, \\\"Tokens must be different\\\");\\n\\n\\t\\ttokenA = IERC20(_tokenA);\\n\\t\\ttokenB = IERC20(_tokenB);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add liquidity to the pool\\n\\t * @param amountA Amount of token A to add\\n\\t * @param amountB Amount of token B to add\\n\\t * @return liquidityMinted Amount of liquidity shares minted\\n\\t */\\n\\tfunction addLiquidity(\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 amountB\\n\\t) external nonReentrant returns (uint256 liquidityMinted) {\\n\\t\\trequire(amountA > 0 && amountB > 0, \\\"Amounts must be greater than 0\\\");\\n\\n\\t\\t// Transfer tokens from user to contract\\n\\t\\ttokenA.transferFrom(msg.sender, address(this), amountA);\\n\\t\\ttokenB.transferFrom(msg.sender, address(this), amountB);\\n\\n\\t\\t// Calculate liquidity to mint\\n\\t\\tif (totalLiquidity == 0) {\\n\\t\\t\\t// First liquidity provider: liquidity = sqrt(amountA * amountB)\\n\\t\\t\\t// We use a simple formula: liquidity = amountA (for simplicity)\\n\\t\\t\\tliquidityMinted = amountA;\\n\\t\\t} else {\\n\\t\\t\\t// Subsequent liquidity: maintain pool ratio\\n\\t\\t\\t// liquidityMinted = (amountA / reserveA) * totalLiquidity\\n\\t\\t\\t// We take the minimum to prevent manipulation\\n\\t\\t\\tuint256 liquidityA = (amountA * totalLiquidity) / reserveA;\\n\\t\\t\\tuint256 liquidityB = (amountB * totalLiquidity) / reserveB;\\n\\t\\t\\tliquidityMinted = liquidityA < liquidityB ? liquidityA : liquidityB;\\n\\t\\t}\\n\\n\\t\\trequire(liquidityMinted > 0, \\\"Insufficient liquidity minted\\\");\\n\\n\\t\\t// Update state\\n\\t\\tliquidity[msg.sender] += liquidityMinted;\\n\\t\\ttotalLiquidity += liquidityMinted;\\n\\t\\treserveA += amountA;\\n\\t\\treserveB += amountB;\\n\\n\\t\\temit LiquidityAdded(msg.sender, amountA, amountB, liquidityMinted);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Remove liquidity from the pool\\n\\t * @param liquidityAmount Amount of liquidity shares to burn\\n\\t * @return amountA Amount of token A returned\\n\\t * @return amountB Amount of token B returned\\n\\t */\\n\\tfunction removeLiquidity(\\n\\t\\tuint256 liquidityAmount\\n\\t) external nonReentrant returns (uint256 amountA, uint256 amountB) {\\n\\t\\trequire(liquidityAmount > 0, \\\"Amount must be greater than 0\\\");\\n\\t\\trequire(\\n\\t\\t\\tliquidity[msg.sender] >= liquidityAmount,\\n\\t\\t\\t\\\"Insufficient liquidity\\\"\\n\\t\\t);\\n\\n\\t\\t// Calculate amounts to return (proportional to share)\\n\\t\\tamountA = (liquidityAmount * reserveA) / totalLiquidity;\\n\\t\\tamountB = (liquidityAmount * reserveB) / totalLiquidity;\\n\\n\\t\\trequire(amountA > 0 && amountB > 0, \\\"Insufficient liquidity burned\\\");\\n\\n\\t\\t// Update state\\n\\t\\tliquidity[msg.sender] -= liquidityAmount;\\n\\t\\ttotalLiquidity -= liquidityAmount;\\n\\t\\treserveA -= amountA;\\n\\t\\treserveB -= amountB;\\n\\n\\t\\t// Transfer tokens back to user\\n\\t\\ttokenA.transfer(msg.sender, amountA);\\n\\t\\ttokenB.transfer(msg.sender, amountB);\\n\\n\\t\\temit LiquidityRemoved(msg.sender, amountA, amountB, liquidityAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Swap one token for another\\n\\t * @param tokenIn Address of token to swap in\\n\\t * @param amountIn Amount of token to swap in\\n\\t * @return amountOut Amount of token received\\n\\t */\\n\\tfunction swap(\\n\\t\\taddress tokenIn,\\n\\t\\tuint256 amountIn\\n\\t) external nonReentrant returns (uint256 amountOut) {\\n\\t\\trequire(amountIn > 0, \\\"Amount must be greater than 0\\\");\\n\\t\\trequire(\\n\\t\\t\\ttokenIn == address(tokenA) || tokenIn == address(tokenB),\\n\\t\\t\\t\\\"Invalid token\\\"\\n\\t\\t);\\n\\n\\t\\t// Determine input/output tokens and reserves\\n\\t\\tbool isTokenA = tokenIn == address(tokenA);\\n\\t\\t(IERC20 tokenInContract, IERC20 tokenOutContract) = isTokenA\\n\\t\\t\\t? (tokenA, tokenB)\\n\\t\\t\\t: (tokenB, tokenA);\\n\\t\\t(uint256 reserveIn, uint256 reserveOut) = isTokenA\\n\\t\\t\\t? (reserveA, reserveB)\\n\\t\\t\\t: (reserveB, reserveA);\\n\\n\\t\\t// Transfer input token from user\\n\\t\\ttokenInContract.transferFrom(msg.sender, address(this), amountIn);\\n\\n\\t\\t// Calculate output amount with fee\\n\\t\\t// Formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)\\n\\t\\t// With 0.3% fee: amountIn = amountIn * (1 - 0.003) = amountIn * 997/1000\\n\\t\\tuint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\\n\\t\\tuint256 numerator = amountInWithFee * reserveOut;\\n\\t\\tuint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\\n\\t\\tamountOut = numerator / denominator;\\n\\n\\t\\trequire(amountOut > 0, \\\"Insufficient output amount\\\");\\n\\t\\trequire(amountOut < reserveOut, \\\"Insufficient liquidity\\\");\\n\\n\\t\\t// Update reserves\\n\\t\\tif (isTokenA) {\\n\\t\\t\\treserveA += amountIn;\\n\\t\\t\\treserveB -= amountOut;\\n\\t\\t} else {\\n\\t\\t\\treserveB += amountIn;\\n\\t\\t\\treserveA -= amountOut;\\n\\t\\t}\\n\\n\\t\\t// Transfer output token to user\\n\\t\\ttokenOutContract.transfer(msg.sender, amountOut);\\n\\n\\t\\temit Swap(msg.sender, tokenIn, amountIn, amountOut);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculate swap output amount (view function)\\n\\t * @param tokenIn Address of token to swap in\\n\\t * @param amountIn Amount of token to swap in\\n\\t * @return amountOut Estimated amount of token to receive\\n\\t */\\n\\tfunction getSwapAmount(\\n\\t\\taddress tokenIn,\\n\\t\\tuint256 amountIn\\n\\t) external view returns (uint256 amountOut) {\\n\\t\\trequire(amountIn > 0, \\\"Amount must be greater than 0\\\");\\n\\t\\trequire(\\n\\t\\t\\ttokenIn == address(tokenA) || tokenIn == address(tokenB),\\n\\t\\t\\t\\\"Invalid token\\\"\\n\\t\\t);\\n\\n\\t\\t// Determine reserves\\n\\t\\tbool isTokenA = tokenIn == address(tokenA);\\n\\t\\t(uint256 reserveIn, uint256 reserveOut) = isTokenA\\n\\t\\t\\t? (reserveA, reserveB)\\n\\t\\t\\t: (reserveB, reserveA);\\n\\n\\t\\t// Calculate output with fee\\n\\t\\tuint256 amountInWithFee = amountIn * (FEE_DENOMINATOR - FEE_NUMERATOR);\\n\\t\\tuint256 numerator = amountInWithFee * reserveOut;\\n\\t\\tuint256 denominator = (reserveIn * FEE_DENOMINATOR) + amountInWithFee;\\n\\t\\tamountOut = numerator / denominator;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get current pool state\\n\\t * @return _reserveA Reserve of token A\\n\\t * @return _reserveB Reserve of token B\\n\\t * @return _totalLiquidity Total liquidity shares\\n\\t */\\n\\tfunction getReserves()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256 _reserveA, uint256 _reserveB, uint256 _totalLiquidity)\\n\\t{\\n\\t\\treturn (reserveA, reserveB, totalLiquidity);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get user's liquidity position\\n\\t * @param user Address to check\\n\\t * @return liquidityAmount User's liquidity shares\\n\\t * @return sharePercentage User's percentage of pool (in basis points, e.g., 1000 = 10%)\\n\\t */\\n\\tfunction getUserLiquidity(\\n\\t\\taddress user\\n\\t) external view returns (uint256 liquidityAmount, uint256 sharePercentage) {\\n\\t\\tliquidityAmount = liquidity[user];\\n\\t\\tsharePercentage = totalLiquidity > 0\\n\\t\\t\\t? (liquidityAmount * 10000) / totalLiquidity\\n\\t\\t\\t: 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0x996c1b86ed43643b4a05f8afd1f265f40726d3a847f41aaa3454ab9ae47240be\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516200127a3803806200127a8339810160408190526100319161013b565b60016000556001600160a01b0382161580159061005657506001600160a01b03811615155b6100a75760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420746f6b656e2061646472657373000000000000000000000060448201526064015b60405180910390fd5b806001600160a01b0316826001600160a01b0316036101085760405162461bcd60e51b815260206004820152601860248201527f546f6b656e73206d75737420626520646966666572656e740000000000000000604482015260640161009e565b6001600160a01b039182166080521660a05261016e565b80516001600160a01b038116811461013657600080fd5b919050565b6000806040838503121561014e57600080fd5b6101578361011f565b91506101656020840161011f565b90509250929050565b60805160a051611084620001f660003960008181610197015281816102b30152818161060b015281816107f301528181610a4501528181610af80152610b6001526000818161011d0152818161027801528181610327015281816105790152818161075b01528181610a0a01528181610ab901528181610b190152610b3f01526110846000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639c8f9f231161008c578063d004f0f711610066578063d004f0f714610214578063d73792a914610227578063dbbdd93514610230578063dc5fa6c51461024357600080fd5b80639c8f9f23146101b95780639cd441da146101e1578063b8c876b1146101f457600080fd5b806319e36f3b116100c857806319e36f3b1461016e5780631befa6db1461017757806341cd47bf1461018a5780635f64b55b1461019257600080fd5b80630902f1ac146100ef5780630fc63d101461011857806315770f9214610157575b600080fd5b600154600254600354604080519384526020840192909252908201526060015b60405180910390f35b61013f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010f565b61016060035481565b60405190815260200161010f565b61016060025481565b610160610185366004610ef9565b61024c565b610160600381565b61013f7f000000000000000000000000000000000000000000000000000000000000000081565b6101cc6101c7366004610f23565b6103d6565b6040805192835260208301919091520161010f565b6101606101ef366004610f3c565b6106d3565b610160610202366004610f5e565b60046020526000908152604090205481565b610160610222366004610ef9565b6109de565b6101606103e881565b6101cc61023e366004610f5e565b610e3a565b61016060015481565b60008082116102765760405162461bcd60e51b815260040161026d90610f80565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614806102e757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b6103235760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b604482015260640161026d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161490506000808261036f57600254600154610376565b6001546002545b9092509050600061038a60036103e8610fcd565b6103949087610fe0565b905060006103a28383610fe0565b90506000826103b36103e887610fe0565b6103bd9190610ff7565b90506103c9818361100a565b9998505050505050505050565b6000806103e1610e84565b600083116104015760405162461bcd60e51b815260040161026d90610f80565b336000908152600460205260409020548311156104595760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b604482015260640161026d565b6003546001546104699085610fe0565b610473919061100a565b9150600354600254846104869190610fe0565b610490919061100a565b90506000821180156104a25750600081115b6104ee5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c6971756964697479206275726e6564000000604482015260640161026d565b336000908152600460205260408120805485929061050d908490610fcd565b9250508190555082600360008282546105269190610fcd565b92505081905550816001600082825461053f9190610fcd565b9250508190555080600260008282546105589190610fcd565b909155505060405163a9059cbb60e01b8152336004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee919061102c565b5060405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561065c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610680919061102c565b50604080518381526020810183905290810184905233907f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d9060600160405180910390a26106ce6001600055565b915091565b60006106dd610e84565b6000831180156106ed5750600082115b6107395760405162461bcd60e51b815260206004820152601e60248201527f416d6f756e7473206d7573742062652067726561746572207468616e20300000604482015260640161026d565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af11580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d0919061102c565b506040516323b872dd60e01b8152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610844573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610868919061102c565b5060035460000361087a5750816108cc565b60006001546003548561088d9190610fe0565b610897919061100a565b90506000600254600354856108ac9190610fe0565b6108b6919061100a565b90508082106108c557806108c7565b815b925050505b6000811161091c5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c6971756964697479206d696e746564000000604482015260640161026d565b336000908152600460205260408120805483929061093b908490610ff7565b9250508190555080600360008282546109549190610ff7565b92505081905550826001600082825461096d9190610ff7565b9250508190555081600260008282546109869190610ff7565b9091555050604080518481526020810184905290810182905233907f64b83944e79c3ce8d4c297411de637c3e102d064677aac0c163976ebdcd6f50e9060600160405180910390a26109d86001600055565b92915050565b60006109e8610e84565b60008211610a085760405162461bcd60e51b815260040161026d90610f80565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161480610a7957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b610ab55760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b604482015260640161026d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614905060008082610b3d577f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610b80565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000005b9150915060008084610b9757600254600154610b9e565b6001546002545b6040516323b872dd60e01b8152336004820152306024820152604481018a905291935091506001600160a01b038516906323b872dd906064016020604051808303816000875af1158015610bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1a919061102c565b506000610c2a60036103e8610fcd565b610c349089610fe0565b90506000610c428383610fe0565b9050600082610c536103e887610fe0565b610c5d9190610ff7565b9050610c69818361100a565b985060008911610cbb5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e74000000000000604482015260640161026d565b838910610d035760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b604482015260640161026d565b8715610d3f578960016000828254610d1b9190610ff7565b925050819055508860026000828254610d349190610fcd565b90915550610d709050565b8960026000828254610d519190610ff7565b925050819055508860016000828254610d6a9190610fcd565b90915550505b60405163a9059cbb60e01b8152336004820152602481018a90526001600160a01b0387169063a9059cbb906044016020604051808303816000875af1158015610dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de1919061102c565b50604080518b8152602081018b90526001600160a01b038d169133917ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe235910160405180910390a350505050505050506109d86001600055565b6001600160a01b038116600090815260046020526040812054600354909190610e64576000610e7d565b600354610e7383612710610fe0565b610e7d919061100a565b9050915091565b600260005403610ed65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161026d565b6002600055565b80356001600160a01b0381168114610ef457600080fd5b919050565b60008060408385031215610f0c57600080fd5b610f1583610edd565b946020939093013593505050565b600060208284031215610f3557600080fd5b5035919050565b60008060408385031215610f4f57600080fd5b50508035926020909101359150565b600060208284031215610f7057600080fd5b610f7982610edd565b9392505050565b6020808252601d908201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156109d8576109d8610fb7565b80820281158282048414176109d8576109d8610fb7565b808201808211156109d8576109d8610fb7565b60008261102757634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561103e57600080fd5b81518015158114610f7957600080fdfea26469706673582212201f5ca425cf6831f2e276ef89e78c3ae796a16b82f02ad6d6d31d652e17ad517264736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Supports a single token pair with add/remove liquidity and swap functions",
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256,uint256)": {
        "params": {
          "amountA": "Amount of token A to add",
          "amountB": "Amount of token B to add"
        },
        "returns": {
          "liquidityMinted": "Amount of liquidity shares minted"
        }
      },
      "constructor": {
        "params": {
          "_tokenA": "Address of first token",
          "_tokenB": "Address of second token"
        }
      },
      "getReserves()": {
        "returns": {
          "_reserveA": "Reserve of token A",
          "_reserveB": "Reserve of token B",
          "_totalLiquidity": "Total liquidity shares"
        }
      },
      "getSwapAmount(address,uint256)": {
        "params": {
          "amountIn": "Amount of token to swap in",
          "tokenIn": "Address of token to swap in"
        },
        "returns": {
          "amountOut": "Estimated amount of token to receive"
        }
      },
      "getUserLiquidity(address)": {
        "params": {
          "user": "Address to check"
        },
        "returns": {
          "liquidityAmount": "User's liquidity shares",
          "sharePercentage": "User's percentage of pool (in basis points, e.g., 1000 = 10%)"
        }
      },
      "removeLiquidity(uint256)": {
        "params": {
          "liquidityAmount": "Amount of liquidity shares to burn"
        },
        "returns": {
          "amountA": "Amount of token A returned",
          "amountB": "Amount of token B returned"
        }
      },
      "swap(address,uint256)": {
        "params": {
          "amountIn": "Amount of token to swap in",
          "tokenIn": "Address of token to swap in"
        },
        "returns": {
          "amountOut": "Amount of token received"
        }
      }
    },
    "title": "SimpleDEX",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(uint256,uint256)": {
        "notice": "Add liquidity to the pool"
      },
      "constructor": {
        "notice": "Constructor sets the token pair"
      },
      "getReserves()": {
        "notice": "Get current pool state"
      },
      "getSwapAmount(address,uint256)": {
        "notice": "Calculate swap output amount (view function)"
      },
      "getUserLiquidity(address)": {
        "notice": "Get user's liquidity position"
      },
      "removeLiquidity(uint256)": {
        "notice": "Remove liquidity from the pool"
      },
      "swap(address,uint256)": {
        "notice": "Swap one token for another"
      }
    },
    "notice": "A simplified decentralized exchange using constant product AMM (x * y = k)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 157,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "reserveA",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 159,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "reserveB",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 161,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "totalLiquidity",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 165,
        "contract": "contracts/SimpleDEX.sol:SimpleDEX",
        "label": "liquidity",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}